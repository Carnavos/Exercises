{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","javascripts/bread.js","javascripts/cheese.js","javascripts/condiments.js","javascripts/meat.js","javascripts/sandwichMaker.js","javascripts/veggies.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrfile":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\r\n\r\nlet SandwichMaker = require('./sandwichMaker');\r\n\r\nlet breadPrices = {\r\n  \"wheat\": 1.20,\r\n  \"white\": 1.40,\r\n  \"wonder\": 4.00,\r\n  \"artisan\": 12.00\r\n};\r\n\r\nlet addBread = function(choice) {\r\n  // console.log(\"addBread init\");\r\n  // console.log(\"breadPrices[choice]: \", breadPrices[choice]);\r\n  SandwichMaker.addTopping(breadPrices[choice])\r\n  return breadPrices[choice];\r\n};\r\n\r\nmodule.exports = addBread;","'use strict';\r\n\r\nlet SandwichMaker = require('./sandwichMaker');\r\n\r\nlet cheesePrices = {\r\n  \"american\": 0.40,\r\n  \"swiss\": 0.50,\r\n  \"provolone\": 0.60,\r\n  \"cheddar\": 70.00\r\n};\r\n\r\nlet addCheese = function(choice) {\r\n  SandwichMaker.addTopping(cheesePrices[choice])\r\n  return cheesePrices[choice];\r\n};\r\n\r\nmodule.exports = addCheese;","'use strict';\r\nlet SandwichMaker = require('./sandwichMaker');\r\n\r\nvar condimentsPrices = {\r\n  \"catsup\": 1.90,\r\n  \"mustard\": 1.40,\r\n  \"mayo\": 1.00,\r\n  \"fluff\": 3.00\r\n};\r\n\r\nlet addCondiments = function(choice) {\r\n  SandwichMaker.addTopping(condimentsPrices[choice])\r\n  return condimentsPrices[choice];\r\n};\r\n\r\nmodule.exports = addCondiments;","// // This SandwichMaker IIFE augments the original one\r\n// var SandwichMaker = (function(maker) {\r\n\r\n//   // Private variable to store the different meat prices\r\n//   var meatPrices = {\r\n//     \"ham\": 1.30,\r\n//     \"turkey\": 1.40,\r\n//     \"roastBeef\": 1.60,\r\n//     \"meatball\": 1.90\r\n//   };\r\n\r\n//   // Augment the original object with another method\r\n//   maker.addMeat = function(choice) {\r\n//     SandwichMaker.addTopping(meatPrices[choice])\r\n//     return meatPrices[choice];\r\n//   };\r\n\r\n//   // Return the new, augmented object with the new method on it\r\n//   return maker;\r\n// })(SandwichMaker);\r\n\r\n'use strict';\r\n\r\nlet SandwichMaker = require(\"./sandwichMaker\");\r\n\r\nlet meatPrices = {\r\n  \"ham\": 1.30,\r\n  \"turkey\": 1.40,\r\n  \"roastBeef\": 1.60,\r\n  \"meatball\": 1.90  \r\n}\r\n\r\nlet addMeat = function(choice) {\r\n  SandwichMaker.addTopping(meatPrices[choice]);\r\n  return meatPrices[choice];\r\n};\r\n\r\nmodule.exports = addMeat;","'use strict';\r\n// Variable declaration\r\nvar SandwichMaker = {\r\n  totalPrice: 0,\r\n\r\n  addTopping (toppingPrice) {\r\n    // NEW LEXICAL \"THIS\", now needed or else totalPrice will be undefined (doesn't default to looking up anymore)\r\n    this.totalPrice += toppingPrice;\r\n  },\r\n\r\n  resetTotalPrice () {\r\n    this.totalPrice = 0;\r\n  },\r\n\r\n  getTotalPrice () {\r\n    return this.totalPrice;\r\n  },\r\n  \r\n};\r\nmodule.exports = SandwichMaker;\r\nconsole.log(\"SandwichMaker load test\");\r\n// module.exports = SandwichMaker;\r\n\r\nlet Meat = require(\"./meat\");\r\n// console.log(\"Meat test: \", Meat);\r\n// console.log(Meat(\"ham\"));\r\n\r\nlet Bread = require(\"./bread\");\r\n// console.log(\"Bread test: \", Bread);\r\n// console.log(Bread(\"wheat\"));\r\n\r\nlet Veggies = require(\"./veggies\");\r\n// console.log(\"Veggies test: \", Veggies);\r\n// console.log(Veggies(\"lettuce\"));\r\n\r\nlet Cheese = require(\"./cheese\");\r\n// console.log(\"Cheese test: \", Cheese);\r\n// console.log(Cheese(\"swiss\"));\r\n\r\nlet Condiments = require(\"./condiments\");\r\n// console.log(\"Condiments test: \", Condiments);\r\n// console.log(Condiments(\"catsup\"));\r\n\r\n\r\n// old primary.js\r\n\r\n\r\n// Declare initial variables\r\nlet container = document.getElementById(\"container\");\r\nlet breadSelector = document.getElementById(\"breadSelector\");\r\nlet meatSelector = document.getElementById(\"meatSelector\");\r\nlet cheeseSelector = document.getElementById(\"cheeseSelector\");\r\nlet veggiesSelector = document.getElementById(\"veggiesSelector\");\r\nlet condimentsSelector = document.getElementById(\"condimentsSelector\");\r\nlet selectors = [];\r\nselectors.push(breadSelector, meatSelector, cheeseSelector, veggiesSelector, condimentsSelector);\r\n\r\n// Variable to hold the final price. Default to 0.\r\nlet finalSandwichPrice = 0;\r\n\r\n// Variable to hold toppings (of the same type) that the user selects\r\nlet selectedToppings;\r\n\r\n/* Cirriculum Note: \r\n  A <select> element broadcasts a change event, so you listen for it\r\n  and get the value of the topping from your augmented IIFE\r\n*/\r\n\r\n// Master function to be called for each selector change\r\nfunction choiceHandler(element) {\r\n  // Reset DOM and totalPrice\r\n  container.innerHTML = '';\r\n  SandwichMaker.resetTotalPrice();\r\n\r\n  // Get the values chosen from the DOM\r\n  // forEach with if statement for each topping, running correlating method to send user selection and return one price per call\r\n  selectors.forEach(function(element){\r\n    // Declare local variable for collection of options \r\n    // *HTML COLLECTION* - can only use .length and .item(index) instead of normal array methods\r\n    var selectedToppings = element.selectedOptions;\r\n\r\n    var elementName = element.name;\r\n\r\n    for (var i = 0; i < selectedToppings.length; i++) {\r\n      // Declare variable for current item's value in HTML Collection \r\n      var currentTopping = selectedToppings.item(i).value;\r\n      // Declare variable for current item's name in HTML Collection (used in DOM injection)\r\n      var currentToppingName = selectedToppings.item(i).text;\r\n      // Declare private variable for addMeat call with currentTopping value argument\r\n      switch (elementName)  {\r\n        case \"Bread\": \r\n        var foodComponent = Bread(currentTopping);\r\n        break;\r\n        case \"Meat\": \r\n        var foodComponent = Meat(currentTopping);\r\n        break;\r\n        case \"Cheese\": \r\n        var foodComponent = Cheese(currentTopping);\r\n        break;\r\n        case \"Veggies\": \r\n        var foodComponent = Veggies(currentTopping);\r\n        break;\r\n        case \"Condiments\": \r\n        var foodComponent = Condiments(currentTopping);\r\n        break;\r\n      } \r\n      // Update the DOM with Current Topping and Food Component (addMeat should update the final price)\r\n      container.innerHTML += `<p>Add ${currentToppingName}: $${foodComponent.toFixed(2)}</p>`;\r\n    };\r\n  });\r\n  // Add final price to the DOM outisde of the selectors loop\r\n  container.innerHTML += `<p>Sandwich Total Price: $${SandwichMaker.getTotalPrice().toFixed(2)}</p>`;\r\n  // console.log(\"selectedTopping: \", selectedToppings);\r\n\r\n\r\n\r\n};\r\n\r\n// experimental forEach event listener add\r\nselectors.forEach(function(element){\r\n  element.addEventListener(\"change\", choiceHandler);\r\n  // console.log(\"element.name: \", element.name);\r\n});\r\n\r\n","'use strict';\r\n\r\nlet SandwichMaker = require('./sandwichMaker');\r\n\r\nlet veggiesPrices = {\r\n  \"lettuce\": 0.20,\r\n  \"peppers\": 0.50,\r\n  \"olives\": 0.70,\r\n  \"spinach\": 0.60\r\n};\r\n\r\nlet addVeggies = function(choice) {\r\n  SandwichMaker.addTopping(veggiesPrices[choice])\r\n  return veggiesPrices[choice];\r\n};\r\n\r\nmodule.exports = addVeggies;"]}